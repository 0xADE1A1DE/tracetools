// Copyright 2022 University of Adelaide
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "AESModel.h"
#include <Util.h>

static uint8_t shiftrows[16] = { 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11 };
static uint8_t invsbox[256] = {
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
};

const int STATE_SZ=16;

int hw(uint8_t byte){
    return ((byte & 0b10000000U) >> 7) +
     ((byte & 0b01000000U) >> 6) +
     ((byte & 0b00100000U) >> 5) +
     ((byte & 0b00010000U) >> 4) +
     ((byte & 0b00001000U) >> 3) +
     ((byte & 0b00000100U) >> 2) +
     ((byte & 0b00000010U) >> 1) +
     (byte & 0b1U);
}
void aes_model_t::init(const traceinfo_t* ti, leakage_t** leakage)
{
    _ti = *ti;
    *leakage = new leakage_t();
    (*leakage)->init(STATE_SZ*256);
    cipher.resize(STATE_SZ);
}
// Model: https://eshard.gitlab.io/scared/guides/dpa_v2_attack.html
void aes_model_t::model_leakage(const uint8_t* data, leakage_t* leakage) 
{
    const uint8_t* key = get_key(data);
    const uint8_t* pt = get_plain(data);
    const uint8_t* ct = get_cipher(data);

    for (auto i=0u;i<32;i+=2) {
        cipher[i >> 1] = hex_to_byte((const char*)ct);
        ct += 2;
    }
    
    for (uint32_t i=0;i<STATE_SZ;i++)
    {
        for (uint32_t j=0;j<256;j++) 
        {
            uint8_t st10 = cipher[shiftrows[i]];
            uint8_t st9 = invsbox[cipher[i] ^ j];
            leakage->get_dist_values()[i*256 +j] = (float) hw(st10 ^ st9);
        }
    }
    
}
void aes_model_t::pick_best(const trace_t* corr, std::vector<winner_t>& winners)
{
    auto values = corr->_samples;
    auto len = corr->_traceinfo.nsamples;

    for (auto i=0u;i<len;i+=256)
    {
        uint32_t max_idx = i; 
        for (auto j=i;j<i+256;j++)
        {
            if (values[max_idx] < values[j]) 
            {
                max_idx = j;                
            }
        }
        winners.push_back({ values[max_idx], std::to_string(max_idx % 256), max_idx});
    }
}
const uint8_t* aes_model_t::get_key(const uint8_t* data)
{
    return &data[0];
}
const uint8_t* aes_model_t::get_plain(const uint8_t* data)
{
    return &data[32];
}
const uint8_t* aes_model_t::get_cipher(const uint8_t* data)
{
    return &data[64];
}